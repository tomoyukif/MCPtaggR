% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/01_functions.R
\name{alignTAG}
\alias{alignTAG}
\title{Align simulated digested fragments.}
\usage{
alignTAG(
  dg,
  n_threads = 1,
  indexing = TRUE,
  out_dir = "",
  out_fn = "mcptaggr_aln",
  reuse = FALSE
)
}
\arguments{
\item{dg}{A DG object.}

\item{n_threads}{A integer to specify the number of threads to run the read
alignment.}

\item{indexing}{A logical value to indicate whether you need to build index
files of the merged genome the generated via \code{digestGenome()}.}

\item{out_dir}{A string to specify the output directory.}

\item{out_fn}{A string to specify the prefix of output files.}

\item{reuse}{If TRUE, this function do not generate output files but reuse
the files specified as out_fn in the out_dir directory.}
}
\value{
A AR class object used in \code{mcptagg()}.
}
\description{
Align simulated digested fragments.
}
\details{
An input DG class object has a string indicating the path to
the merged genome that was generated via \code{digestGenome()} and contains genome
sequences of both genomes specified as \code{ref_fn} and \code{alt_fn} to run
\code{digestGenome()}. The merged genome has to be indexed for read alignment. If
you run \code{alignTAG()} on the merged genome first time, \code{indexing = TRUE}
should always be specified. \code{reuse = TRUE} can omit the indexinig step if you
already have the index files for the merged genome that is pointed by the GD
class object.
}
\examples{
\dontrun{
ar <- alignTAG(dg = dg, 
               n_threads = 10, 
               indexing = TRUE,
               out_dir = "outdir",
               out_fn = "out",
               reuse = FALSE)
}

}
